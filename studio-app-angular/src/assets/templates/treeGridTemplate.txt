import { CommonModule } from '@angular/common';
import {FlatTreeControl} from '@angular/cdk/tree';
import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';
import {MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule} from '@angular/material/tree';
import {MatIconModule} from '@angular/material/icon';
import {MatButtonModule} from '@angular/material/button';

/**
 * Food data with nested structure.
 * Each node has a name and an optional list of children.
 */
interface TreeNode {
  name: string;
  children?: TreeNode[];
}

/** Flat node with expandable and level information */
interface TreeFlatNode {
  expandable: boolean;
  name: string;
  level: number;
}

@Component({
  selector: '${prefix}-${selector}',
  templateUrl: './${selector}.component.html',
  styleUrls: ['./${selector}.component.css'],
  standalone: true,
  imports: [CommonModule, MatTreeModule, MatButtonModule, MatIconModule]
})
export class ${name}Component implements OnChanges{
  @Input() treeData: any;
  renderTreeGrid = false
  private _transformer = (node: TreeNode, level: number) => {
    return {
      expandable: !!node.children && node.children.length > 0,
      name: node.name,
      level: level,
    };
  };

  treeControl = new FlatTreeControl<TreeFlatNode>(
    node => node.level,
    node => node.expandable,
  );

  treeFlattener = new MatTreeFlattener(
    this._transformer,
    node => node.level,
    node => node.expandable,
    node => node.children,
  );

  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);

  constructor() {}

  hasChild = (_: number, node: TreeFlatNode) => node.expandable;

  ngOnChanges(changes: SimpleChanges): void {
    for (let propName in changes) {
      let change = changes[propName];
      if(change && change.currentValue) {
        const initData = change.currentValue;
        this.dataSource.data = initData.data;
        this.renderTreeGrid = true;
      }
    }
  }

}

########
<div *ngIf="renderTreeGrid">
    <mat-tree [dataSource]="dataSource" [treeControl]="treeControl">
        <!-- This is the tree node template for leaf nodes -->
        <mat-tree-node *matTreeNodeDef="let node" matTreeNodePadding>
          <!-- use a disabled button to provide padding for tree leaf -->
          <button mat-icon-button disabled></button>
          {{node.name}}
        </mat-tree-node>
        <!-- This is the tree node template for expandable nodes -->
        <mat-tree-node *matTreeNodeDef="let node;when: hasChild" matTreeNodePadding>
          <button mat-icon-button matTreeNodeToggle
                  [attr.aria-label]="'Toggle ' + node.name">
            <mat-icon class="mat-icon-rtl-mirror">
              {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}
            </mat-icon>
          </button>
          {{node.name}}
        </mat-tree-node>
      </mat-tree>
</div>

########

########

This component takes an input parameter 'treeData', by which the data can be passed to the component.
The input data passed to 'treeData' should be in the below sample format:
`
  [
    {
    "name": "flare",
    "children": [
        {
          "name": "analytics",
          "children": [
            {
              "name": "cluster",
              "children": [
                {
                  "name": "AgglomerativeCluster", 
                  ...
                },  
                ...
              ]
            }
            ...
          ]
        }
      ]
    }
  ]
`